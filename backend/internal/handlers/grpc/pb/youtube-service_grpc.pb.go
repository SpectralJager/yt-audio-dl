// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pkg/proto/youtube-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YoutubeGRPCServiceClient is the client API for YoutubeGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YoutubeGRPCServiceClient interface {
	VideoGetMeta(ctx context.Context, in *VideoGetReq, opts ...grpc.CallOption) (*Video, error)
	VideoGetStream(ctx context.Context, in *VideoGetReq, opts ...grpc.CallOption) (YoutubeGRPCService_VideoGetStreamClient, error)
	PlaylistGetMeta(ctx context.Context, in *PlaylistGetReq, opts ...grpc.CallOption) (*Playlist, error)
}

type youtubeGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYoutubeGRPCServiceClient(cc grpc.ClientConnInterface) YoutubeGRPCServiceClient {
	return &youtubeGRPCServiceClient{cc}
}

func (c *youtubeGRPCServiceClient) VideoGetMeta(ctx context.Context, in *VideoGetReq, opts ...grpc.CallOption) (*Video, error) {
	out := new(Video)
	err := c.cc.Invoke(ctx, "/pb.YoutubeGRPCService/VideoGetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youtubeGRPCServiceClient) VideoGetStream(ctx context.Context, in *VideoGetReq, opts ...grpc.CallOption) (YoutubeGRPCService_VideoGetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &YoutubeGRPCService_ServiceDesc.Streams[0], "/pb.YoutubeGRPCService/VideoGetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &youtubeGRPCServiceVideoGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YoutubeGRPCService_VideoGetStreamClient interface {
	Recv() (*VideoStreamResp, error)
	grpc.ClientStream
}

type youtubeGRPCServiceVideoGetStreamClient struct {
	grpc.ClientStream
}

func (x *youtubeGRPCServiceVideoGetStreamClient) Recv() (*VideoStreamResp, error) {
	m := new(VideoStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *youtubeGRPCServiceClient) PlaylistGetMeta(ctx context.Context, in *PlaylistGetReq, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, "/pb.YoutubeGRPCService/PlaylistGetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YoutubeGRPCServiceServer is the server API for YoutubeGRPCService service.
// All implementations must embed UnimplementedYoutubeGRPCServiceServer
// for forward compatibility
type YoutubeGRPCServiceServer interface {
	VideoGetMeta(context.Context, *VideoGetReq) (*Video, error)
	VideoGetStream(*VideoGetReq, YoutubeGRPCService_VideoGetStreamServer) error
	PlaylistGetMeta(context.Context, *PlaylistGetReq) (*Playlist, error)
	mustEmbedUnimplementedYoutubeGRPCServiceServer()
}

// UnimplementedYoutubeGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYoutubeGRPCServiceServer struct {
}

func (UnimplementedYoutubeGRPCServiceServer) VideoGetMeta(context.Context, *VideoGetReq) (*Video, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoGetMeta not implemented")
}
func (UnimplementedYoutubeGRPCServiceServer) VideoGetStream(*VideoGetReq, YoutubeGRPCService_VideoGetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method VideoGetStream not implemented")
}
func (UnimplementedYoutubeGRPCServiceServer) PlaylistGetMeta(context.Context, *PlaylistGetReq) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaylistGetMeta not implemented")
}
func (UnimplementedYoutubeGRPCServiceServer) mustEmbedUnimplementedYoutubeGRPCServiceServer() {}

// UnsafeYoutubeGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YoutubeGRPCServiceServer will
// result in compilation errors.
type UnsafeYoutubeGRPCServiceServer interface {
	mustEmbedUnimplementedYoutubeGRPCServiceServer()
}

func RegisterYoutubeGRPCServiceServer(s grpc.ServiceRegistrar, srv YoutubeGRPCServiceServer) {
	s.RegisterService(&YoutubeGRPCService_ServiceDesc, srv)
}

func _YoutubeGRPCService_VideoGetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoutubeGRPCServiceServer).VideoGetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.YoutubeGRPCService/VideoGetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoutubeGRPCServiceServer).VideoGetMeta(ctx, req.(*VideoGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YoutubeGRPCService_VideoGetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoGetReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YoutubeGRPCServiceServer).VideoGetStream(m, &youtubeGRPCServiceVideoGetStreamServer{stream})
}

type YoutubeGRPCService_VideoGetStreamServer interface {
	Send(*VideoStreamResp) error
	grpc.ServerStream
}

type youtubeGRPCServiceVideoGetStreamServer struct {
	grpc.ServerStream
}

func (x *youtubeGRPCServiceVideoGetStreamServer) Send(m *VideoStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _YoutubeGRPCService_PlaylistGetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoutubeGRPCServiceServer).PlaylistGetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.YoutubeGRPCService/PlaylistGetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoutubeGRPCServiceServer).PlaylistGetMeta(ctx, req.(*PlaylistGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// YoutubeGRPCService_ServiceDesc is the grpc.ServiceDesc for YoutubeGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YoutubeGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.YoutubeGRPCService",
	HandlerType: (*YoutubeGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoGetMeta",
			Handler:    _YoutubeGRPCService_VideoGetMeta_Handler,
		},
		{
			MethodName: "PlaylistGetMeta",
			Handler:    _YoutubeGRPCService_PlaylistGetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VideoGetStream",
			Handler:       _YoutubeGRPCService_VideoGetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/youtube-service.proto",
}
